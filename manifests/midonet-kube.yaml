---
#
# Zookeeper
#
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    run: zookeeper
  name: zookeeper
  namespace: kube-system
spec:
  replicas: 1
  template:
    metadata:
      labels:
        run: zookeeper
    spec:
      hostNetwork: true
      containers:
      - image: zookeeper
        imagePullPolicy: IfNotPresent
        name: zookeeper
        resources: {}
      nodeSelector:
        node-role.kubernetes.io/master: ""
      tolerations:
      - operator: Exists
---
#
# Midonet Cluster
#
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: midonet-cluster
  name: midonet-cluster
  namespace: kube-system
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: midonet-cluster
    spec:
      hostNetwork: true
      containers:
      - image: midonet/cluster:latest
        imagePullPolicy: Always
        env:
        - name: ZK_ENDPOINTS
          value: 127.0.0.1:2181
        - name: AUTH_PROVIDER
          value: Mock
        - name: MIDONET_API_URL
          valueFrom:
            configMapKeyRef:
              name: midonet-kube-config
              key: midonet.api
        - name: CLUSTER_ROUTER_UUID
          valueFrom:
            configMapKeyRef:
              name: midonet-kube-config
              key: midonet.router
        name: midonet-cluster
        resources: {}
      nodeSelector:
        node-role.kubernetes.io/master: ""
      tolerations:
      - operator: Exists
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: midonet
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes/status
    verbs:
      - patch
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: midonet
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: midonet
subjects:
- kind: ServiceAccount
  name: midonet
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: midonet
  namespace: kube-system
---
#
# Midonet Agent
#
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: midonet-agent
  namespace: kube-system
  labels:
    tier: node
    app: midonet
spec:
  template:
    metadata:
      labels:
        tier: node
        app: midonet
    spec:
      hostNetwork: true
      tolerations:
      - operator: Exists
      serviceAccountName: midonet
      containers:
      - image: midonet/agent:latest
        imagePullPolicy: Always
        name: midonet-agent
        env:
        - name: ZK_ENDPOINTS
          valueFrom:
            configMapKeyRef:
              name: midonet-kube-config
              key: zookeeper.endpoint
        - name: HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: MIDONET_API_URL
          valueFrom:
            configMapKeyRef:
              name: midonet-kube-config
              key: midonet.api
        - name: HOST_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: MIDONET_TUNNELZONE
          valueFrom:
            configMapKeyRef:
              name: midonet-kube-config
              key: midonet.tunnelzone
        securityContext:
          privileged: true
        volumeMounts:
        - name: modules
          mountPath: /lib/modules/
      volumes:
      - name: modules
        hostPath:
          path: /lib/modules
---
apiVersion: apiextensions.k8s.io/v1beta1
description: MidoNet Translated Resources
kind: CustomResourceDefinition
metadata:
  name: translations.midonet.org
spec:
  scope: Namespaced
  group: midonet.org
  version: v1
  names:
    kind: Translation
    plural: translations
    singular: translation
    shortNames:
    - tr
---
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  name: midonet-kube-controllers
  namespace: kube-system
  labels:
    k8s-app: midonet-kube-controllers
spec:
  replicas: 1
  template:
    metadata:
      name: midonet-kube-controllers
      namespace: kube-system
      labels:
        k8s-app: midonet-kube-controllers
    spec:
      serviceAccountName: midonet-kube-controllers
      hostNetwork: true
      tolerations:
        - operator: Exists
      containers:
        - name: midonet-kube-controllers
          image: midonet/midonet-kube-controllers:1.1
          env:
            - name: MIDONETKUBE_MIDONET_API
              valueFrom:
                configMapKeyRef:
                  name: midonet-kube-config
                  key: midonet.api
            - name: MIDONETKUBE_MIDONET_USERNAME
              valueFrom:
                secretKeyRef:
                  name: midonet-kube-credential
                  key: midonet.username
            - name: MIDONETKUBE_MIDONET_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: midonet-kube-credential
                  key: midonet.password
            - name: MIDONETKUBE_MIDONET_PROJECT
              valueFrom:
                secretKeyRef:
                  name: midonet-kube-credential
                  key: midonet.project
            - name: MIDONETKUBE_CLUSTER_ROUTER
              valueFrom:
                configMapKeyRef:
                  name: midonet-kube-config
                  key: midonet.router
            - name: MIDONETKUBE_KUBERNETES_SUBNET
              valueFrom:
                configMapKeyRef:
                  name: midonet-kube-config
                  key: kubernetes.endpoint.subnet
            - name: KUBERNETES_SERVICE_HOST
              valueFrom:
                configMapKeyRef:
                  name: midonet-kube-config
                  key: kubernetes.endpoint.host
            - name: KUBERNETES_SERVICE_PORT
              valueFrom:
                configMapKeyRef:
                  name: midonet-kube-config
                  key: kubernetes.endpoint.port
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: midonet-kube-controllers
  namespace: kube-system
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: midonet-kube-controllers
rules:
  - apiGroups:
    - ""
    resources:
      - pods
      - services
      - endpoints
    verbs:
      - get
      - list
      - watch
  - apiGroups:
    - ""
    resources:
      - nodes
    verbs:
      - get
      - list
      - watch
      - update
  - apiGroups:
    - midonet.org
    resources:
      - translations
    verbs:
      - get
      - list
      - watch
      - update
      - create
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: midonet-kube-controllers
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: midonet-kube-controllers
subjects:
- kind: ServiceAccount
  name: midonet-kube-controllers
  namespace: kube-system
---
kind: DaemonSet
apiVersion: extensions/v1beta1
metadata:
  name: midonet-kube-node
  namespace: kube-system
  labels:
    k8s-app: midonet-kube-node
spec:
  selector:
    matchLabels:
      k8s-app: midonet-kube-node
  template:
    metadata:
      labels:
        k8s-app: midonet-kube-node
    spec:
      hostNetwork: true
      tolerations:
        - operator: Exists
      serviceAccountName: midonet-kube-node
      containers:
        - name: midonet-kube-node
          image: midonet/midonet-kube-node:1.1
          securityContext:
            privileged: true
          env:
            - name: MIDONETKUBE_NODENAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: MIDONETKUBE_CLUSTERCIDR
              valueFrom:
                configMapKeyRef:
                  name: midonet-kube-config
                  key: cluster.cidr
            - name: MIDONETKUBE_SERVICECIDR
              valueFrom:
                configMapKeyRef:
                  name: midonet-kube-config
                  key: service.cidr
            - name: KUBERNETES_SERVICE_HOST
              valueFrom:
                configMapKeyRef:
                  name: midonet-kube-config
                  key: kubernetes.endpoint.host
            - name: KUBERNETES_SERVICE_PORT
              valueFrom:
                configMapKeyRef:
                  name: midonet-kube-config
                  key: kubernetes.endpoint.port
            - name: MIDONETKUBE_CNICONFIGPATH
              value: /host/etc/cni/net.d/00-midonet.conf
          volumeMounts:
            - mountPath: /host/etc/cni/net.d
              name: cni-net-dir
            - mountPath: /host/opt/cni/bin
              name: cni-bin-dir
      volumes:
        - name: cni-bin-dir
          hostPath:
            path: /opt/cni/bin
        - name: cni-net-dir
          hostPath:
            path: /etc/cni/net.d
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: midonet-kube-node
  namespace: kube-system
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: midonet-kube-node
rules:
  - apiGroups: [""]
    resources:
      - nodes
    verbs:
      - get
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: midonet-kube-node
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: midonet-kube-node
subjects:
- kind: ServiceAccount
  name: midonet-kube-node
  namespace: kube-system

